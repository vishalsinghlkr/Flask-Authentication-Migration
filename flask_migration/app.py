#what is migration in flask?
#Migration in Flask, particularly when using Flask-Migrate, refers to the process of managing changes to the database schema over time. It allows developers to evolve their database structure without losing existing data or having to manually alter the database.
#Flask-Migrate is an extension that handles SQLAlchemy database migrations for Flask applications using Alembic. It provides a way to create, apply, and manage database migrations in a structured manner.
#Migrations are essential for maintaining the integrity of the database schema as the application evolves, especially in collaborative environments where multiple developers may be making changes to the database models.
#Flask-Migrate automates the process of generating migration scripts based on changes in the SQLAlchemy models, allowing developers to easily apply these changes to the database.
#Here is a simple example of how to set up Flask-Migrate in a Flask application:
from flask import Flask
from flask_migrate import Migrate
from flask_sqlalchemy import SQLAlchemy
app=Flask(__name__)

app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db'
db=SQLAlchemy(app)

migrate = Migrate(app, db)


class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(200), nullable=True)
    email = db.Column(db.String(120), nullable=True)
    fullname = db.Column(db.String(200), nullable=True)


    

if __name__ == '__main__':

    app.run(debug=True)


# flask db init ---> Initializes the migration environment. where migrations folder is created 
# when we  run this command?---> 


#flask db migrate -m "Initial migration" ---> Generates a new migration script based on the changes detected in the models.
# This command compares the current state of the database with the models defined in your application and creates a migration script that reflects those changes.
# The -m option allows you to add a message to the migration script for better tracking.


# flask db upgrade ---> Applies the migration to the database. This command executes the migration script generated by the previous command, updating the database schema to match the current state of your models.
# If you have multiple migrations, this command will apply all pending migrations in the correct order.


#flask db downgrade ---> Reverts the last migration applied to the database. This command allows you to roll back the changes made by the last migration script, restoring the previous state of the database schema. 
# Note: Downgrading may not always be possible if the migration script contains irreversible changes, such as dropping columns or tables.

# flask db history ---> Shows the migration history. This command lists all the migration scripts that have been applied to the database, along with their revision IDs and messages.
# This is useful for tracking the changes made to the database schema over time and understanding the evolution of your application's data model.

